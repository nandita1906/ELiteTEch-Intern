# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Step 1: Load the dataset
# For example, let's assume we have a CSV file containing customer data
# dataset = pd.read_csv('customer_data.csv')

# For this example, we simulate a dataset
# Sample customer data (Age, Annual Income (k$), Spending Score (1-100))
data = {
    'Age': [19, 21, 23, 24, 30, 35, 40, 45, 50, 55, 60, 65, 70],
    'Annual Income (k$)': [15, 16, 17, 18, 20, 25, 30, 35, 40, 45, 50, 60, 70],
    'Spending Score (1-100)': [39, 81, 6, 77, 40, 76, 45, 50, 15, 12, 91, 11, 25]
}

df = pd.DataFrame(data)

# Step 2: Data Preprocessing
# Normalize the data (important for K-Means)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(df)

# Step 3: Determine the optimal number of clusters (elbow method)
wcss = []  # Within-cluster sum of squares

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(scaled_data)
    wcss.append(kmeans.inertia_)

# Plot Elbow Method
plt.figure(figsize=(10,6))
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method For Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# From the plot, we can decide the optimal number of clusters (say k=3)

# Step 4: Apply K-Means with the chosen number of clusters
kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=0)
y_kmeans = kmeans.fit_predict(scaled_data)

# Step 5: Visualize the Clusters
# Use PCA to reduce to 2D for visualization purposes
pca = PCA(n_components=2)
principal_components = pca.fit_transform(scaled_data)
df_pca = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])
df_pca['Cluster'] = y_kmeans

# Plot the clusters
plt.figure(figsize=(10, 6))
plt.scatter(df_pca['PC1'][df_pca['Cluster'] == 0], df_pca['PC2'][df_pca['Cluster'] == 0], s=100, c='red', label='Cluster 1')
plt.scatter(df_pca['PC1'][df_pca['Cluster'] == 1], df_pca['PC2'][df_pca['Cluster'] == 1], s=100, c='blue', label='Cluster 2')
plt.scatter(df_pca['PC1'][df_pca['Cluster'] == 2], df_pca['PC2'][df_pca['Cluster'] == 2], s=100, c='green', label='Cluster 3')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='yellow', label='Centroids')
plt.title('Customer Segments')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend()
plt.show()

# Step 6: Analyze the Clusters
df['Cluster'] = y_kmeans
print(df)

# You can now use this data to target different marketing strategies for each segment

